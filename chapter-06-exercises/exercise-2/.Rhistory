# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <-
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <-
?gsub()
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(mainInput) {
return mainInput + 3
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(mainInput) {
return(mainInput + 3)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches ) {
return(feet*0.3048 + inches*0.0254)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6,2)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Samyak", "Mohit", "Jenn")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1
print(n)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
m - n
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
all_numbers
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
eleventh
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
?all
all(even %% 2 = 0)
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
clear
# Q1
# Creates a variable called 'my_age' that stores my current age.
my_age <- 19
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", my_name, " and I'm ", my_age, " years old."))
}
make_introduction()
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, " and I'm ", age, " years old."))
}
make_introduction()
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(q_name, age) {
return(paste("Hello, my name is ", q_name, " and I'm ", age, " years old."))
}
make_introduction()
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(q_name, age) {
return(paste("Hello, my name is ", q_name, " and I'm ", age, " years old."))
}
make_introduction()
return(paste("Hello, my name is ", name, " and I'm ", age, " years old."))
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, " and I'm ", age, " years old."))
}
make_introduction()
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
# Q2
# Creates a variable called 'my_name' that stores my name.
my_name <- "Samyak"
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, "and I'm", age, "years old."))
}
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, " and I'm ", age, " years old."))
}
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Q5
# Creates a variable called 'casual_intro' which replaces 'Hello, my name is' in 'my_intro' variable
#   with 'Hey, I'm'.
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
install.packages("stringr")
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
install.packages("stringr")
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
# install.packages("devtools")
devtools::install_github("hadley/stringr")
install.packages("devtools")
devtools::install_github("hadley/stringr")
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
letters %>%
str_pad(5, "right") %>%
str_c(letters)
# Q1
# Creates a variable called 'my_age' that stores my current age.
my_age <- 19
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- stringr::str_to_title(my_intro)
# install.packages("stringr")
library(stringr)
install.packages("stringr")
install.packages("stringr")
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
library(stringr)
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_upper(my_intro)
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Q7
# Creates a variable called 'intro_e_count' that stores the number of times the letter 'e'
#   (lower-case only) appears in the 'my_intro' variable.
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
# Q1
# Creates a variable called 'my_age' that stores my current age.
my_age <- 19
# Q2
# Creates a variable called 'my_name' that stores my name.
my_name <- "Samyak"
# Q3
# Creates a function called 'make_introduction' that takes in 2 parameters; 'name' and 'age'
#   which returns a character string of the format "Hello, my name is {NAME} and I'm {AGE} years old."
make_introduction <- function(name, age) {
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# Q4
# Creates a variable called 'my_intro' which uses the function 'make_introduction',
#   assigning it the result of the make_introduction() function with 'my_name'
#   and 'my_age' variables passed into it. Then it prints out the result.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Q5
# Creates a variable called 'casual_intro' which replaces 'Hello, my name is' in 'my_intro' variable
#   with 'Hey, I'm'.
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# Q6
# Creates a variable called 'capital_intro' which capitalizes every word in the 'my_intro' variable.
capital_intro <- str_to_title(my_intro)
print(capital_intro)
print(capital_intro)
# Q7
# Creates a variable called 'intro_e_count' that stores the number of times the letter 'e'
#   (lower-case only) appears in the 'my_intro' variable.
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
