add_pizza <- function(given_meal) {
given_meal <- c(given_meal, "Pizza")
return(given_meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- c(add_pizza(my_breakfast), add_pizza(my_lunch), add_pizza(dinner))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
temp_vector1 <- "Employee"
temp_vector2 <- 1:100
Employee_name <- paste(temp_vector1, temp_vector2)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
Employee_salary <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
Salary_adjustment <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(Employee_name, Employee_salary, salary_adjustment, stringsAsFactors = FALSE)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustment <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(Employee_name, Employee_salary, salary_adjustment, stringsAsFactors = FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
temp_vector1 <- "Employee"
temp_vector2 <- 1:100
Employee_name <- paste(temp_vector1, temp_vector2)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
Employee_salary <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustment <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(Employee_name, Employee_salary, salary_adjustment, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$total_salaries <- Employee_salary + salary_adjustment
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$employee_raise <- if(salaries$salary_adjustment > 0) {
TRUE
}
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$employee_raise <- salaries$salary_adjustment > 0
View(salaries)
# What was the 2018 salary of Employee 57
salaries[salaries$Employee_name = "Employee 57", "total_salaries"]
# What was the 2018 salary of Employee 57
salaries[salaries$Employee_name == "Employee 57", "total_salaries"]
# How many employees got a raise?
nrow(salaries[salaries$employee_raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$employee_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$total_salaries == max()]
# What was the dollar value of the highest raise?
salaries[salaries$total_salaries == max(salaries$total_salaries)]
# What was the dollar value of the highest raise?
salaries[salaries$total_salaries == max(salaries$total_salaries), ]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$total_salaries == max(salaries$total_salaries), "Employee_name"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$total_salaries == max(salaries$salary_adjustment), ]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salary_adjustment == max(salaries$salary_adjustment), ]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salary_adjustment == min(salaries$salary_adjustment), ]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjustment == min(salaries$salary_adjustment), "Employee_name"]
# For people who did not get a raise, how much money did they lose on average?
mean( salaries[salaries$employee_raise == FALSE, "salary_adjustment"])
# What was the average salary change?
mean(salaries$salary_adjustment)
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "final Solution.csv", row.names = FALSE)
getwd()
setwd("~/Documents/Courses/Sophomore Year/INFO 201/git-practice/book-exercises/chapter-10-exercises/exercise-2")
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "final Solution.csv", row.names = FALSE)
# Q1
##  Creates a variable called 'numbers' which stores a vector of the numbers 1 to 201.
numbers <- 1:201
# Q1
##  Creates a variable called 'numbers' which stores a vector of the numbers 1 to 201.
numbers <- seq(1, 201)
# Q2
# Creates a variable called 'squared_numbers' which stores the square of the above vector.
squared_numbers <- numbers * numbers
# Q3
# Creates a variable called 'squared_mean' which stores the median value of the vector squared_numbers.
squared_median <- mean(squared_numbers)
# Q1
#  Creates a variable called 'numbers' which stores a vector of the numbers 1 to 201.
numbers <- seq(1, 200)
# Q2
# Creates a variable called 'squared_numbers' which stores the square of the above vector.
squared_numbers <- numbers * numbers
# Q3
# Creates a variable called 'squared_mean' which stores the median value of the vector squared_numbers.
squared_median <- mean(squared_numbers)
# Q3
# Creates a variable called 'squared_mean' which stores the median value of the vector squared_numbers.
squared_median <- meadian(squared_numbers)
# Q3
# Creates a variable called 'squared_mean' which stores the median value of the vector squared_numbers.
squared_median <- median(squared_numbers)
# Q1
#  Creates a variable called 'numbers' which stores a vector of the numbers 1 to 201.
numbers <- seq(1, 201)
# Q2
# Creates a variable called 'squared_numbers' which stores the square of the above vector.
squared_numbers <- numbers * numbers
# Q3
# Creates a variable called 'squared_mean' which stores the median value of the vector squared_numbers.
squared_median <- median(squared_numbers)
print(squared_median)
# Q3
# Creates a variable called 'squared_mean' which stores the mean value of the vector squared_numbers.
squared_mean <- median(squared_numbers)
print(squared_mean)
# Q4
# Creates a variable called 'squared_median' which stores the median value of the vector squared_numbers.
squared_median <- median(squared_numbers)
print(squared_median)
# Q1
#  Creates a variable called 'numbers' which stores a vector of the numbers 1 to 201.
numbers <- seq(1, 201)
# Q2
# Creates a variable called 'squared_numbers' which stores the square of the above vector.
squared_numbers <- numbers * numbers
# Q3
# Creates a variable called 'squared_mean' which stores the mean value of the vector squared_numbers.
squared_mean <- median(squared_numbers)
print(squared_mean)
# Q3
# Creates a variable called 'squared_mean' which stores the mean value of the vector squared_numbers.
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Q5
# Creates a variable called 'perfect_squares' which stores only the elements from 'numbers' which are perfect
#   squares.
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
spring_break <- as.Date(spring_date, "%m%d%y")
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_date <- "03/03/2020"
spring_break <- as.Date(spring_date, "%m%d%y")
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_date <- "03/03/20"
spring_break <- as.Date(spring_date, "%m%d%y")
spring_break <- as.Date(spring_date, "%m%d%y")
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_date <- "03/03/2020"
spring_break <- as.Date(spring_date, "%m%d%y")
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_date <- "03/03/2020"
spring_break <- as.Date(spring_date, "%m/%d/%y")
spring_break <- as.Date("03/03/2020", "%m/%d/%y")
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_break <- as.Date("03/03/2020", "%m/%d/%y")
# Q1
#  Creates a variable called 'numbers' which stores a vector of the numbers 1 to 201.
numbers <- seq(1, 201)
# Q2
# Creates a variable called 'squared_numbers' which stores the square of the above vector.
squared_numbers <- numbers * numbers
# Q3
# Creates a variable called 'squared_mean' which stores the mean value of the vector 'squared_numbers'.
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Q4
# Creates a variable called 'squared_median' which stores the median value of the vector 'squared_numbers'.
squared_median <- median(squared_numbers)
print(squared_median)
# Q5
# Creates a variable called 'perfect_squares' which stores only the elements from 'numbers' which are perfect
#   squares.
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_break <- as.Date("03/03/2020", "%m/%d/%y")
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_break <- as.Date("03/03/2020", "%m/%d/%y")
# Q2
print(class(spring_break) == "Date")
# Q3
#
today <- Sys.Date()
# Q4
# Creates a variable called 'days_to_break' which represents the amount of
#   time from the current date until break.
days_to_break <- difftime(spring_break, today)
print(days_to_break)
spring_break2 <- as.Date("03/04/2020", "%m/%d/%y")
# Q4
# Creates a variable called 'days_to_break' which represents the amount of
#   time from the current date until break.
days_to_break <- difftime(spring_break, spring_break2)
print(days_to_break)
# Q2
# To check whether the upper question is implemented correctly.
print(class(spring_break) == "Date")
# Q3
# Creates a variable 'today' which stores today's date.
today <- Sys.Date()
# Q4
# Creates a variable called 'days_to_break' which represents the amount of
#   time from the current date until break.
days_to_break <- difftime(spring_break, today)
print(days_to_break)
# Q5
# Creates a function called 'change_year' which takes in two arguments:
#   a Date-type value and a year (as a number)
# Returns new date with the input year.
change_year <- function(test_date, test_year) {
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
return(as.Date(c(test_year, temp_string), "%Y-%m-%d"))
}
# Q6
# Test for the function 'change_year'.
spring_break_2025 <- change_year(spring_break, "2025")
print(spring_break_2025)
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_break <- as.Date("2020-21-03", "%Y-%m-%d")
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_break <- as.Date("2020-03-21", "%Y-%m-%d")
# Q2
# To check whether the upper question is implemented correctly.
print(class(spring_break) == "Date")
# Q3
# Creates a variable 'today' which stores today's date.
today <- Sys.Date()
# Q4
# Creates a variable called 'days_to_break' which represents the amount of
#   time from the current date until break.
days_to_break <- difftime(spring_break, today)
print(days_to_break)
# Q5
# Creates a function called 'change_year' which takes in two arguments:
#   a Date-type value and a year (as a number)
# Returns new date with the input year.
change_year <- function(test_date, test_year) {
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
return(as.Date(c(test_year, temp_string), "%Y-%m-%d"))
}
# Q6
# Test for the function 'change_year'.
spring_break_2025 <- change_year(spring_break, "2025")
print(spring_break_2025)
# Q6
# Test for the function 'change_year'.
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
print(temp_string)
date_as_string <- as.character(test_date)
# Q5
# Creates a function called 'change_year' which takes in two arguments:
#   a Date-type value and a year (as a number)
# Returns new date with the input year.
change_year <- function(test_date, test_year) {
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
print(temp_string)
return(as.Date(c(test_year, temp_string), "%Y-%m-%d"))
}
print(temp_string)
temp_string <- substr(date_as_string, 5, 10)
date_as_string <- as.character(test_date)
# Q5
# Creates a function called 'change_year' which takes in two arguments:
#   a Date-type value and a year (as a number)
# Returns new date with the input year.
change_year <- function(test_date, test_year) {
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
print(temp_string)
return(as.Date(c(test_year, temp_string), "%Y-%m-%d"))
}
test_date <- spring_break
test_date <- spring_break
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_break <- as.Date("2020-03-21", "%Y-%m-%d")
# Q2
# To check whether the upper question is implemented correctly.
print(class(spring_break) == "Date")
# Q3
# Creates a variable 'today' which stores today's date.
today <- Sys.Date()
# Q4
# Creates a variable called 'days_to_break' which represents the amount of
#   time from the current date until break.
days_to_break <- difftime(spring_break, today)
print(days_to_break)
# Q5
# Creates a function called 'change_year' which takes in two arguments:
#   a Date-type value and a year (as a number)
# Returns new date with the input year.
change_year <- function(test_date, test_year) {
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
print(temp_string)
return(as.Date(c(test_year, temp_string), "%Y-%m-%d"))
}
test_date <- spring_break
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
print(temp_string)
return(as.Date(c(test_year, temp_string), "%Y-%m-%d"))
test_year <- 2025
return(as.Date(c(test_year, temp_string), "%Y-%m-%d"))
as.Date(c(test_year, temp_string), "%Y-%m-%d")
test_year <- "2025"
as.Date(c(test_year, temp_string), "%Y-%m-%d")
as.Date(cs(test_year, temp_string), "%Y-%m-%d")
as.Date(paste(test_year, temp_string), "%Y-%m-%d")
print(temp_string)
as.Date(paste(test_year, temp_string), "%Y-%m-%d")
qwerty <- as.Date(paste(test_year, temp_string), "%Y-%m-%d")
print(qwerty)
asdf <- paste(test_year, temp_string)
print(asdf)
print(temp_string)
asdf <- paste0(test_year, temp_string)
print(asdf)
asdf <- c0(test_year, temp_string)
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_break <- as.Date("2020-03-21", "%Y-%m-%d")
# Q2
# To check whether the upper question is implemented correctly.
print(class(spring_break) == "Date")
# Q3
# Creates a variable 'today' which stores today's date.
today <- Sys.Date()
# Q4
# Creates a variable called 'days_to_break' which represents the amount of
#   time from the current date until break.
days_to_break <- difftime(spring_break, today)
print(days_to_break)
# Q5
# Creates a function called 'change_year' which takes in two arguments:
#   a Date-type value and a year (as a number)
# Returns new date with the input year.
change_year <- function(test_date, test_year) {
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
print(temp_string)
return(as.Date(paste0(test_year, temp_string), "%Y-%m-%d"))
}
# Q6
# Test for the function 'change_year'.
spring_break_2025 <- change_year(spring_break, 2025)
# Q5
# Creates a function called 'change_year' which takes in two arguments:
#   a Date-type value and a year (as a number)
# Returns new date with the input year.
change_year <- function(test_date, test_year) {
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
return(as.Date(paste0(test_year, temp_string), "%Y-%m-%d"))
}
# Q6
# Test for the function 'change_year'.
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025) == Date
class(spring_break_2025) == "Date"
return(input_date > Sys.Date())
# Q7
# Creates a function called 'date_has_passed' which expects a single Date-type value as an argument.
#   Returns a boolean representing whether that date has already occurred.
date_has_passed <- function(input_date) {
return(input_date > Sys.Date())
}
print(date_has_passed(spring_break))
# Q7
# Creates a function called 'date_has_passed' which expects a single Date-type value as an argument.
#   Returns a boolean representing whether that date has already occurred.
date_has_passed <- function(input_date) {
return(input_date < Sys.Date())
}
print(date_has_passed(spring_break))
# Q8
# Test for the function 'date_has_passed'
print(date_has_passed(as.Date("2020-01-23", "%y-%m-%d")))
# Q8
# Test for the function 'date_has_passed'
zxc <- as.Date("2020-01-23", "%y-%m-%d")
print(zxc)
# Q8
# Test for the function 'date_has_passed'
zxc <- as.Date("2020-01-23", "%Y-%m-%d")
print(zxc)
# Q8
# Test for the function 'date_has_passed'
print(date_has_passed(as.Date("2020-01-23", "%Y-%m-%d")))
asd <- substr(qwert)
input_date <- as.Date("2020-01-01", "%Y-%m-%d")
print(input_date)
qwert <- as.character(input_date)
asd <- substr(qwert,6,10)
zxc <- Sys.Date()
zxcvb <- as.character(zxc)
zxcv <- as.character(zxc)
zxcvb <- substr(qwert,6,10)
print(asd > zxcvb)
current_string <- as.character(current_date)
# Q7
# Creates a function called 'date_has_passed' which expects a single Date-type value as an argument.
#   Returns a boolean representing whether that date has already occurred.
date_has_passed <- function(input_date, ignore_year = FALSE) {
if(ignore_year == TRUE) {
current_date <- Sys.Date()
current_string <- as.character(current_date)
curr_without_year <- substr(current_string, 6, 10)
input_string <- as.character(input_date)
input_without_year <- substr(input_string, 6, 10)
return(input_without_year < curr_without_year)
}
return(input_date < Sys.Date())
}
# Q1
# Creates a variable called 'spring_break' which represents the first day of Spring.
spring_break <- as.Date("2020-03-21", "%Y-%m-%d")
# Q2
# To check whether the upper question is implemented correctly.
print(class(spring_break) == "Date")
# Q3
# Creates a variable 'today' which stores today's date.
today <- Sys.Date()
# Q4
# Creates a variable called 'days_to_break' which represents the amount of
#   time from the current date until break.
days_to_break <- difftime(spring_break, today)
print(days_to_break)
# Q5
# Creates a function called 'change_year' which takes in two arguments:
#   a Date-type value and a year (as a number)
# Returns new date with the input year.
change_year <- function(test_date, test_year) {
date_as_string <- as.character(test_date)
temp_string <- substr(date_as_string, 5, 10)
return(as.Date(paste0(test_year, temp_string), "%Y-%m-%d"))
}
# Q6
# Test for the function 'change_year'.
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
# Test for Date type.
class(spring_break_2025) == "Date"
# Test for Date type.
print(class(spring_break_2025) == "Date")
# Q7
# Creates a function called 'date_has_passed' which expects a single Date-type value as an argument.
#   Returns a boolean representing whether that date has already occurred.
date_has_passed <- function(input_date, ignore_year = FALSE) {
if(ignore_year == TRUE) {
current_date <- Sys.Date()
current_string <- as.character(current_date)
curr_without_year <- substr(current_string, 6, 10)
input_string <- as.character(input_date)
input_without_year <- substr(input_string, 6, 10)
return(input_without_year < curr_without_year)
}
return(input_date < Sys.Date())
}
# Q8
# Test for the function 'date_has_passed'
print(date_has_passed(as.Date("2020-01-23", "%Y-%m-%d")))
print(date_has_passed(as.Date("2020-01-23", "%Y-%m-%d"), TRUE))
# Q8
# Test for the function 'date_has_passed'
print(date_has_passed(as.Date("2021-01-23", "%Y-%m-%d")))
print(date_has_passed(as.Date("2021-01-23", "%Y-%m-%d"), TRUE))
print(date_has_passed(as.Date("2019-11-23", "%Y-%m-%d"), TRUE))
print(date_has_passed(as.Date("2021-11-23", "%Y-%m-%d"), TRUE))
# Q8
# Test for the function 'date_has_passed'
print(date_has_passed(as.Date("2020-01-23", "%Y-%m-%d")))
print(date_has_passed(as.Date("2021-11-23", "%Y-%m-%d"), TRUE))
print(date_has_passed(as.Date("2021-01-23", "%Y-%m-%d"), TRUE))
# Q8
# Test for the function 'date_has_passed'
print(date_has_passed(as.Date("2021-01-23", "%Y-%m-%d")))
print(date_has_passed(as.Date("2021-01-23", "%Y-%m-%d"), TRUE))
print(date_has_passed(as.Date("2021-01-23", "%Y-%m-%d"), FALSE))
print(date_has_passed(as.Date("2021-01-23", "%Y-%m-%d"), TRUE))
