install.packages("fueleconomy")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
Views(grants)
# Use the View function to look at the loaded data
View(grants)
# What was the mean grant value?
mean(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
# What was the dollar amount of the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "total_amount"]
# What was the dollar amount of the largest grant?
grants[grants$total_amount == max(grants$total_amount), "total_amount"]
# How many grants were awarded in 2010?
sum(grants[grants$start_year == "2010", "total_amount"])
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[grants$organization]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[grants$organization, "organization"]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization, "organization"
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(vehicles$make)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(vehicles)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(vehicles$make)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, "year"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", "year"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997",]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", ]
# Filter the data set for vehicles manufactured in 1997
vehicles.1997 <- vehicles[vehicles$year == "1997", ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles.1997$average <- (vehicles.1997$hwy + vehicles.1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles[vehicles$drive == "2 Wheel Drive", ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2 Wheel Drive", ]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mlg <- max(vehicles_2wd[vehicles_2wd$hwy, "id"])
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mlg <- min(vehicles_2wd[vehicles_2wd$hwy, "id"])
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mlg <- min(vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id"])
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mlg <- min(vehicles_2wd[vehicles_2wd$hwy, "id"])
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mlg <- vehicles_2wd[vehicles_2wd$hwy, "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mlg <- vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mlg <- min(vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id"])
temp_year <- vehicles[vehicles$year == year_choice, "make"]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
vehicle_model <- function(year_choice, make_choice) {
temp_year <- vehicles[vehicles$year == year_choice, ]
make_temp <- temp_year[temp_year$make == make_choice, ]
return(max(make_temp[make_temp$hwy == max(make_temp$hwy), "id"]))
}
# What was the most efficient Honda model of 1995?
vehicle_model(1995, "Honda")
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")
load(library())
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("dplyr")
#install.packages("nycflights13")
library("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
#install.packages("nycflights13")
library("nycflights123")
install.packages("nycflights123")
library("nycflights123")
library("nycflights13")
install.packages("nycflights13")
install.packages("nycflights13")
#install.packages("nycflights13")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("dplyr")
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights, avg = mean(delayed_in_air,na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights, avg = mean(delayed_in_air,na.rm = T))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights, avg = mean(delayed_in_air,na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
ta_sea <- filter(flights, dpst == "SEA")
View(flights)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
ta_sea <- filter(flights, dest == "SEA")
ta_sea <- select(ta_sea, origin, dest, deployed_in_air)
ta_sea <- select(ta_sea, origin, dest, deployed_in_air, na.rm = TRUE)
ta_sea <- select(ta_sea, origin, dest, delayed_in_air, na.rm = TRUE)
ta_sea <- select(ta_sea, origin, dest, delayed_in_air)
View(ta_sea)
# On average, did flights to SeaTac gain or loose time?
summarize(ta_sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
